/*
 * generated by Xtext
 */
package org.shashwat.xtext.smallJava.formatting;

import com.google.inject.Inject;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.shashwat.xtext.smallJava.services.SmallJavaDslGrammarAccess;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SmallJavaDslFormatter extends AbstractDeclarativeFormatter {
	
	@Inject
	private SmallJavaDslGrammarAccess grammarAccess; 
	
	@Override
	protected void configureFormatting(FormattingConfig formattingConfig) {
		formattingConfig.setLinewrap(2).after(grammarAccess.getNamespaceAccess().getNameQualifiedNameParserRuleCall_1_0());
		formattingConfig.setLinewrap(2).before(grammarAccess.getSmallJavaRule());
		
		formattingConfig.setLinewrap(1).after(grammarAccess.getSmallJavaAccess().getLeftCurlyBracketKeyword_5());
		formattingConfig.setLinewrap(1).before(grammarAccess.getSmallJavaAccess().getRightCurlyBracketKeyword_7());
		
		formattingConfig.setLinewrap(1).after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0());
	}
}
