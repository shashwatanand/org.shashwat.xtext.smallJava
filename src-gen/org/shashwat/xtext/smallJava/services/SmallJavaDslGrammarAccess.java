/*
 * generated by Xtext
 */
package org.shashwat.xtext.smallJava.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmallJavaDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SmallJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SmallJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentSmallJavaCrossReference_2_1_0 = (CrossReference)cParentAssignment_2_1.eContents().get(0);
		private final RuleCall cParentSmallJavaIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentSmallJavaCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributeParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SmallJava:
		//	"class" name=ID ("extends" parent=[SmallJava])? "{" attribute+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" parent=[SmallJava])? "{" attribute+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" parent=[SmallJava])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//parent=[SmallJava]
		public Assignment getParentAssignment_2_1() { return cParentAssignment_2_1; }

		//[SmallJava]
		public CrossReference getParentSmallJavaCrossReference_2_1_0() { return cParentSmallJavaCrossReference_2_1_0; }

		//ID
		public RuleCall getParentSmallJavaIDTerminalRuleCall_2_1_0_1() { return cParentSmallJavaIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attribute+=Attribute*
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }

		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_4_0() { return cAttributeAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatatypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatatypeDatatypeParserRuleCall_0_0 = (RuleCall)cDatatypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute:
		//	datatype=Datatype name=ID;
		@Override public ParserRule getRule() { return rule; }

		//datatype=Datatype name=ID
		public Group getGroup() { return cGroup; }

		//datatype=Datatype
		public Assignment getDatatypeAssignment_0() { return cDatatypeAssignment_0; }

		//Datatype
		public RuleCall getDatatypeDatatypeParserRuleCall_0_0() { return cDatatypeDatatypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBigDecimalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Datatype:
		//	"String" | "Integer" | "Boolean" | "Decimal" | "BigDecimal";
		@Override public ParserRule getRule() { return rule; }

		//"String" | "Integer" | "Boolean" | "Decimal" | "BigDecimal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//"Boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }

		//"Decimal"
		public Keyword getDecimalKeyword_3() { return cDecimalKeyword_3; }

		//"BigDecimal"
		public Keyword getBigDecimalKeyword_4() { return cBigDecimalKeyword_4; }
	}
	
	
	private final SmallJavaElements pSmallJava;
	private final AttributeElements pAttribute;
	private final DatatypeElements pDatatype;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallJavaDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmallJava = new SmallJavaElements();
		this.pAttribute = new AttributeElements();
		this.pDatatype = new DatatypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.shashwat.xtext.smallJava.SmallJavaDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SmallJava:
	//	"class" name=ID ("extends" parent=[SmallJava])? "{" attribute+=Attribute* "}";
	public SmallJavaElements getSmallJavaAccess() {
		return pSmallJava;
	}
	
	public ParserRule getSmallJavaRule() {
		return getSmallJavaAccess().getRule();
	}

	//Attribute:
	//	datatype=Datatype name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Datatype:
	//	"String" | "Integer" | "Boolean" | "Decimal" | "BigDecimal";
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
